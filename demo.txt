 app.post("/create-product", async (req, res) => {
      const addedProduct = req.body;
      const result = await menCollection.insertOne(addedProduct);
      res.status(200).send(result);
    });

    app.put("/update-product/:id", async (req, res) => {
      try {
        const id = req.params.id;
        const filter = { _id: new ObjectId(id) };
        const updatedProduct = req.body;
        console.log(updatedProduct);
        const updatedDetails = {
          $set: {
            product_name: updatedProduct.product_name,
            category: updatedProduct.category,
            product_image: updatedProduct.product_image,
            flash_sale: updatedProduct.flash_sale,
            amount: updatedProduct.amount,
            description: updatedProduct.description,
            keypoints: updatedProduct.keypoints,
          },
        };
        const result = await menCollection.updateOne(filter, updatedDetails);

        if (result.matchedCount === 0) {
          return res.status(404).send({ message: "Product not found" });
        }
        if (result.modifiedCount === 0) {
          return res.status(400).send({ message: "No changes made" });
        }

        res.status(200).send(result);
      } catch (error) {
        console.error("Error:", error);
        res.status(500).send({ message: "Internal server error" });
      }
    });

    app.delete("/delete-product/:id", async (req, res) => {
      try {
        const id = req.params.id;
        const query = { _id: new ObjectId(id) };
        const result = await menCollection.deleteOne(query);
        res.status(200).send(result);
      } catch (error) {
        console.error("Error:", error);
        res.status(500).send({ message: "Internal server error" });
      }
    });

    app.get("/men-clothing", async (req, res) => {
      try {
        const category = req.query.category;
        const minAmount = parseFloat(req.query.minAmount);
        const maxAmount = parseFloat(req.query.maxAmount);
        const rating = req.query.rating;

        let query = {};

        if (category) {
          query.category = category;
        }
        if (!isNaN(minAmount) && !isNaN(maxAmount)) {
          query.amount = {};
          query.amount.$gte = minAmount;
          query.amount.$lte = maxAmount;
        }

        if (rating) {
          query.rating = parseFloat(rating); // Parsing rating as float
        }

        const result = await menCollection.find(query).toArray();
        res.status(200).send(result);
      } catch (error) {
        console.error("Error:", error);
        res.status(500).send({ message: "Internal server error" });
      }
    });

    app.get("/men-clothing/:id", async (req, res) => {
      const id = req.params.id;
      const query = { _id: new ObjectId(id) };
      try {
        const result = await menCollection.findOne(query);
        res.status(200).send(result);
      } catch (error) {
        console.error("Error:", error);
        res.status(500).send({ message: "Internal server error" });
      }
    });